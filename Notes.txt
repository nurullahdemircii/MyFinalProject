--- Lesson 07 ---

-> Class'lar public, protected olarak tanýmlanabilir. Eðer herhangi bir taným yapýlmamýþsa default olarak Internal olarak tanýmlanmýþ olur.
	-> Public class: Solution içindeki tüm projeler tarafýndan eriþim saðlanabilir.
	-> Protected class: Solution içindeki hiç bir proje tarafýndan miras(Inheritance) alýnmamýþsa eriþim saðlanamaz.
	-> Internal class: Solution içindeki hiçbir projeden eriþim saðlanamaz. Misras alýnmýþ olsa bile. Sadece ilgili projenin eriþebileceði anlamýný taþýr.

-> Data Access
	-> Veri Eriþim Kodlarý
-> Business
	-> Ýþ Kodlarý
	-> Ýþ Kurallarý
-> API (Web Service)
	-> RestFull (json formatý)
-> UI(User Interface)
	-> ASP.NET, Android, IOS, etc.

-> Blank Solution
	->	Add NewProject
		->	DataAccess
			->	Add NewFolder
				->	Abstract
					*	Soyut(Abstract, Interface, Base) Classlar Bu Klasöründe Tanýmlanýr.
				->	Concrete
					*	Somut() Classlar Bu Klasörde Tanýmlanýr. 
					*	Add -> New Class
						*	Classlar default olarak Internal Tanýmlýdýr. Public, Protected, Private deðildir.
						*	Burdaki Classý Public olarak tanýmlanýr. Tüm Katmanlar tarafýndan eriþim saðlanmasý içindir.
						*	Internal tanýmlý demek Sadece ilgili Proje(Katman) içerisinden ulaþým saðlanabilir demektir.
		->	Business
			->	Add NewFolder
				->	Abstract
					*	Soyut(Abstract, Interface, Base) Classlar Bu Klasöründe Tanýmlanýr.
				->	Concrete
					*	Somut() Classlar Bu Klasörde Tanýmlanýr. 
					*	Add -> New Class
						*	Classlar default olarak Internal Tanýmlýdýr. Public, Protected, Private deðildir.
						*	Burdaki Classý Public olarak tanýmlanýr. Tüm Katmanlar tarafýndan eriþim saðlanmasý içindir.
						*	Internal tanýmlý demek Sadece ilgili Proje(Katman) içerisinden ulaþým saðlanabilir demektir.
		->	Entities
			->	Add NewFolder
				->	Abstract
					*	Soyut(Abstract, Interface, Base) Classlar Bu Klasöründe Tanýmlanýr.
				->	Concrete
					*	Somut() Classlar Bu Klasörde Tanýmlanýr.
					*	Add -> New Class
						*	Classlar default olarak Internal Tanýmlýdýr. Public, Protected, Private deðildir.
						*	Burdaki Classý Public olarak tanýmlanýr. Tüm Katmanlar tarafýndan eriþim saðlanmasý içindir.
						*	Internal tanýmlý demek Sadece ilgili Proje(Katman) içerisinden ulaþým saðlanabilir demektir.
		->	ConsoleUI
			*	Set as StartUp Project (Projenin ConsoleUI ile baþlayacaðý belirtilir.)


->	Entities = 
	->	IEntity = Interface
		*	IEntity implement eden class bir veritabaný tablosudur.
		*	IEntity bir veri tabaný nesnesidir.
->	DataAccess = Veri Eriþimi
	*	Veri Eriþimi yapýlacak alandýr.
	*	Entity de oluþturulan nesnelerin Interfaceleri DataAccess Abstract ta oluþturulmalýdýr.
->	Business = Ýþ Kurallarý
	*	Ýlk yapýlan iþlem tabiki interface oluþturmaktýr.


--- LESSON 8 ---

->  Expression:
    *   Fonksiyonumuzun içerisine LINQ kodu ile istenilen filtreye göre veritabanýndan sonuç döndürmesidir.
    *   filter = null ile istenilirse bir filtre tanýmlanmayabilir özelliði kazanmýþtýr.
    *   filter ile filtre vermek zorunludur özelliði kazanmýþtýr.
->  T Get(Expression<Func<T, bool>> filter); method'u ile istenilen tek bir veri çekilebilir.

->	EntityFramework
	*	Microsoft ürünüdür.
	*	ORM: Object Relational Mapping
	*	LINQ destekli çalýþýr.
	*	ORM: Veritabanýndaki tablolarý bir class'mýþ gibi LINQ ile kullanýlabilen bir yapýdýr.
	->	Context
		*	Veritabaný ile proje classlarýný iliþkilendirmek.
		-> Bunun için DataAccess kalsöründeki EntityFramework klasöründe yeni bir class (NorthwindContext adýnda) oluþturulur.
			*	Bu class'ta veritabaný baðlantýsý yapýlýr.
			*	Veritabanýndaki tablolar ile Entites klasöründeki class'lar iliþkilendirilir.
			*	Ýliþkilendirme iþlemi DbSet anahtar kelimesi ile yapýlýr.
		->	//  IDispossable pattern implementation of c#
            *	using (NorthwindContext context=new NorthwindContext()){ }
			*	C# özel yapýlarýndan biridir.
			*	using içine yazýlan nesneler iþi bitince hemen atýlmasý için kullanýlýr.Garbage Collector ile saðlanýr.


















